# Sarah Trop and Daniel Nanetti-Palacios
# Lab: Reliable Transport Protocol


## The A Side
When the protocol calls A_ouput(message), A_output checks to see if the
next sequence number is still within our window. If it isn't, then A_output
will refuse the data and not send any packet. If it is still within the
window, A_output will create a packet and send it to layer3. If the base
and next sequence number are equal, then the timer starts. The last thing
to happen in A_output is the next squence number being incremented. 

hen the A side is receiving instead of sending (when A_input(packet) is
called), A_input will check if the message has been corrupted. If it is
corrupted, then the packet will be resent. Otherwise, the base will equal
to the packet's ACK number + 1. If base and nextseqnum are equal, the timer
will stop, otherwise the timer will be reset.

If A_timerinterrupt() is called while packets are being
sent and received by the A side, the packets will have to be
retransmitted. A_init() will initialize the A side, before any packets have
been sent or receieved by the A side. The base and nextseqnum will start at 1. 

## The B Side
When B_input(packet) is called, when the B side is receiving input, B_input
will check to see if the packet is corrupted in anyway. If it is, then
B_input will end. If the expected sequence number does not equal the next
sequence number, then a packet was lost and will prompt A to resend
it. Otherwise the received packet will be sent to Layer 5 and an ACK packet
will be sent to A, and expseqnum will increment by 1.

B_init() initializes the B side before any functions have been called,
setting expseqnum to 1.

